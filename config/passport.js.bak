var passport = require('passport');
var User = require('../app/models/user');
var config = require('./auth');
var JwtStrategy = require('passport-jwt').Strategy;
var ExtractJwt = require('passport-jwt').ExtractJwt;
var LocalStrategy = require('passport-local').Strategy;

var localOptions = {
    usernameField: 'email',
    passReqToCallback: true
};

var localLogin = new LocalStrategy(localOptions, function (req, email, password, done) {
    console.log('----passport----req.body', req.body);
    console.log('----passport----req.body.email', req.body.email);
    console.log('----passport----req.body.role', );
    console.log('----passport----email', email);
    let params = null;
    if (email.search("@") == -1) {
        if (req.body.role) {
            params = {
                phone: email,
                role: req.body.role
            }
        }else{
            params = {
                phone: email
            }
        }
    } else if (email.search("@") != -1) {
        if (req.body.role) {
            params = {
                email: email,
                role: req.body.role
            }
        }else{
            params = {
                email: email
            }
        }
    }
    console.log('----passport----params' + params);
    User.findOne(params, function (err, user) {
        if (err) {
            console.log('----passport----err' + err);
            return done(err);
        }
        console.log('----passport----user' + user);
        if (!user) {
            return done(null, false, { error: 'Login failed. Please try again.' });
        }
        user.comparePassword(password, function (err, isMatch) {
            if (err) {
                console.log('----comparePassword----err' + err);
                return done(err);
            }
            console.log('----comparePassword----isMatch' + isMatch);
            if (!isMatch) {
                return done(null, false, { error: 'Login failed. Please try again.' });
            }
            return done(null, user);
        });
    });
});

var jwtOptions = {
    jwtFromRequest: ExtractJwt.fromAuthHeader(),
    secretOrKey: config.secret
};

var jwtLogin = new JwtStrategy(jwtOptions, function (payload, done) {
    console.log('jwtOptions', jwtOptions)
    User.findById(payload._id, function (err, user) {
        console.log('payload', payload)
        console.log('user', user)
        if (err) {
            return done(err, false);
        }

        if (user) {
            done(null, user);
        } else {
            done(null, false);
        }

    });

});

passport.use(jwtLogin);
passport.use(localLogin);

module.exports = {
    initialize: () => passport.initialize(),
    authenticateJWT: passport.authenticate('jwt', { session: false }),
    authenticateCredentials: passport.authenticate('local', { session: false }),
};